{
  "custom": {
    "derivedFromUDTFolder": "Standard/Model",
    "faultTags": null,
    "fromUDT": {
      "name": "Model",
      "path": "[TPOpnim]_types_/Standard/Model",
      "tags": [
        {
          "name": "Model Item",
          "parameters": {
            "ChildrenTagProviderFolderPath": "{datatype\u003dString, value\u003d}",
            "ParentTagProviderFolderPath": "{datatype\u003dString, value\u003d}",
            "Version": "{datatype\u003dString, value\u003d2.2023.195.16.35}"
          },
          "path": "Model Item",
          "tagType": "UdtType",
          "tags": [
            {
              "dataType": "String",
              "expression": "{ChildrenTagProviderFolderPath}",
              "name": "ChildrenTagProviderFolderPath",
              "path": "ChildrenTagProviderFolderPath",
              "readOnly": true,
              "sourceTagPath": "{bindType\u003dparameter, binding\u003d{ChildrenTagPath}}",
              "tagType": "AtomicTag",
              "valueSource": "expr"
            },
            {
              "dataType": "String",
              "expression": "{TagProvider}",
              "name": "TagProvider",
              "path": "TagProvider",
              "sourceTagPath": "{bindType\u003dparameter, binding\u003d{TagProvider}}",
              "tagType": "AtomicTag",
              "value": "",
              "valueSource": "memory"
            },
            {
              "dataType": "Document",
              "expression": "runScript(\u0027Standard.Model.Common.GetChildModelItems\u0027,0,\"[\"+{[.]TagProvider}+\"]\"+{[.]PathToParentFolder})",
              "name": "Children",
              "path": "Children",
              "tagType": "AtomicTag",
              "valueSource": "expr"
            },
            {
              "dataType": "Boolean",
              "expression": "if({[.]../../Model Item/Visible}\u003dfalse,false,{Visible})",
              "name": "Visible",
              "path": "Visible",
              "tagType": "AtomicTag",
              "value": true,
              "valueSource": "memory"
            },
            {
              "dataType": "Document",
              "name": "ViewPaths",
              "path": "ViewPaths",
              "tagType": "AtomicTag",
              "value": {
                "ViewPathArray": [
                  {
                    "ContentType": [
                      "Overview"
                    ],
                    "Label": "Overview",
                    "Order": 0,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": "*Overview/Overview"
                  },
                  {
                    "ContentType": [
                      "Dashboard"
                    ],
                    "Label": "Dashboard",
                    "Order": 1,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": "*Dashboard/Dashboard"
                  },
                  {
                    "ContentType": [
                      "Mimic"
                    ],
                    "Label": "Mimic",
                    "Order": 2,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": "*Mimic/Mimic"
                  },
                  {
                    "ContentType": [
                      "Alarms",
                      "Footer Alarms"
                    ],
                    "Label": "Alarms",
                    "Order": 3,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": "*Alarms/Alarms"
                  },
                  {
                    "ContentType": [
                      "Events"
                    ],
                    "Label": "Events",
                    "Order": 4,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": ""
                  },
                  {
                    "ContentType": [
                      "Trend"
                    ],
                    "Label": "Trend",
                    "Order": 5,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": "*Trend/Trend"
                  },
                  {
                    "ContentType": [
                      "Reports"
                    ],
                    "Label": "Reports",
                    "Order": 6,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": ""
                  },
                  {
                    "ContentType": [
                      "Setpoints"
                    ],
                    "Label": "Setpoints",
                    "Order": 7,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": ""
                  },
                  {
                    "ContentType": [
                      "Header Status"
                    ],
                    "Label": "Plant Status",
                    "Order": 0,
                    "PagePath": "",
                    "Roles": [],
                    "ViewPath": "*Header/Status"
                  }
                ]
              },
              "valueSource": "memory"
            },
            {
              "dataType": "String",
              "expression": "\t//Get Start of Parent Model Path\r\n\tif({[.]ParentTagProviderFolderPath}\u003d\"\",\"\",\r\n\t\t\tsubstring({[.]ParentTagProviderFolderPath},indexOf({[.]ParentTagProviderFolderPath},\"]\")+1) + \"/\"\r\n\t\t)\r\n\t+ \r\n\t//Add Current Provider Folder Path\r\n\t{[.]PathToParentFolder}",
              "name": "ModelPath",
              "path": "ModelPath",
              "tagType": "AtomicTag",
              "valueSource": "expr"
            },
            {
              "name": "Order",
              "path": "Order",
              "tagType": "AtomicTag",
              "value": 0,
              "valueSource": "memory"
            },
            {
              "dataType": "String",
              "eventScripts": [
                {
                  "eventid": "valueChanged",
                  "script": "\t#This Script is Used to Get Tag Provider Dynamically\n\ttagProvider \u003d tagPath.split(\u0027]\u0027)[0].replace(\u0027[\u0027,\u0027\u0027)\n\ttagProviderTagPath \u003d \"[.]TagProvider\"\n\tsystem.tag.writeBlocking(tagPaths\u003d[tagProviderTagPath], values\u003d[tagProvider])"
                }
              ],
              "expression": "{[.]FolderPathArray}[len({[.]FolderPathArray})-1]",
              "name": "Name",
              "path": "Name",
              "tagType": "AtomicTag",
              "valueSource": "expr"
            },
            {
              "dataType": "String",
              "name": "Version",
              "path": "Version",
              "readOnly": true,
              "tagType": "AtomicTag",
              "value": "{bindType\u003dparameter, binding\u003d{Version}}",
              "valueSource": "memory"
            },
            {
              "name": "Alarm Summary",
              "parameters": {
                "DisplayPath": "{datatype\u003dString, value\u003d{bindType\u003dparameter, binding\u003d{PathToParentFolder}}}"
              },
              "path": "Alarm Summary",
              "tagType": "UdtInstance",
              "tags": [
                {
                  "dataType": "Document",
                  "eventScripts": [
                    {
                      "eventid": "valueChanged",
                      "script": "\tStandard.Model.Alarms.TriggerParentModelItemAlarmSummaryInformation()"
                    }
                  ],
                  "expression": "if({ChildrenTagProviderFolderPath}\u003d\"\",\r\n\trunScript(\"Standard.Model.Alarms.GetAlarmSummary\",0,{[.]DisplayPath},{[.]Update Trigger}),\r\n\ttag({ChildrenTagProviderFolderPath}+\u0027/Model Item/Alarm Summary/Information\u0027)\r\n)",
                  "name": "Information",
                  "path": "Information",
                  "tagType": "AtomicTag",
                  "valueSource": "expr"
                },
                {
                  "dataType": "String",
                  "expression": "{[.]../ModelPath} + \"*\"",
                  "name": "DisplayPath",
                  "path": "DisplayPath",
                  "tagType": "AtomicTag",
                  "valueSource": "expr"
                },
                {
                  "dataType": "Boolean",
                  "expression": "0",
                  "name": "Update Trigger",
                  "path": "Update Trigger",
                  "tagType": "AtomicTag",
                  "value": false,
                  "valueSource": "memory"
                }
              ],
              "typeId": "Standard/Alarms/Alarm Summary"
            },
            {
              "dataType": "String",
              "expression": "replace({PathToParentFolder},\"/\"+{InstanceName},\"\")",
              "name": "PathToParentFolder",
              "path": "PathToParentFolder",
              "tagType": "AtomicTag",
              "valueSource": "expr"
            },
            {
              "dataType": "StringArray",
              "expression": "split(replace({PathToParentFolder},\"/\"+{ParentInstanceName},\"\"),\"/\")",
              "name": "FolderPathArray",
              "path": "FolderPathArray",
              "tagType": "AtomicTag",
              "valueSource": "expr"
            },
            {
              "dataType": "String",
              "expression": "\"Model Views/\" + {[.]TagProvider} + \"/\" + {[.]PathToParentFolder}",
              "name": "BaseViewPath",
              "path": "BaseViewPath",
              "tagType": "AtomicTag",
              "valueSource": "expr"
            },
            {
              "dataType": "String",
              "expression": "{ParentTagProviderFolderPath}",
              "name": "ParentTagProviderFolderPath",
              "path": "ParentTagProviderFolderPath",
              "readOnly": true,
              "tagType": "AtomicTag",
              "value": "{bindType\u003dparameter, binding\u003d{ParentTagProviderTagPath}}",
              "valueSource": "expr"
            }
          ],
          "typeId": "Standard/Default"
        }
      ]
    },
    "response": "Configured:Good",
    "tagProvider": "TPOpnim",
    "toUDT": {
      "name": "Model",
      "parentTagPath": "CTI505",
      "tagType": "Folder",
      "tags": [
        {
          "name": "Model Item",
          "tagType": "UdtType",
          "typeId": "Standard/Model/Model Item"
        }
      ]
    },
    "toUDTFolder": "CTI505/Model"
  },
  "params": {},
  "propConfig": {
    "custom.derivedFromUDTFolder": {
      "persistent": true
    },
    "custom.fromUDT": {
      "binding": {
        "config": {
          "struct": {
            "derivedFromUDTFolder": "{view.custom.derivedFromUDTFolder}",
            "tagProvider": "{view.custom.tagProvider}"
          },
          "waitOnAll": true
        },
        "transforms": [
          {
            "code": "\ttagProvider \u003d value[\u0027tagProvider\u0027]\n\tderivedFromUDTFolder \u003d value[\u0027derivedFromUDTFolder\u0027]\n\t\n\tfromFolder \u003d \u0027[\u0027+tagProvider+\u0027]_types_/\u0027+derivedFromUDTFolder\n\tfromTags \u003d system.tag.getConfiguration(basePath\u003dfromFolder, recursive\u003dTrue)\n\t\n\treturn fromTags[0]",
            "type": "script"
          }
        ],
        "type": "expr-struct"
      },
      "persistent": true
    },
    "custom.fromUDT.tagType": {
      "binding": {
        "config": {
          "fallbackDelay": 2.5,
          "mode": "direct",
          "publishInitial": false,
          "tagPath": "[StandardS71500]_types_/Application Default/Control Modules/Testing"
        },
        "type": "tag"
      }
    },
    "custom.response": {
      "persistent": true
    },
    "custom.tagProvider": {
      "persistent": true
    },
    "custom.toUDT": {
      "binding": {
        "config": {
          "struct": {
            "derivedFromUDTFolder": "{view.custom.derivedFromUDTFolder}",
            "fromUDT": "{view.custom.fromUDT}",
            "tagProvider": "{view.custom.tagProvider}",
            "toUDTFolder": "{view.custom.toUDTFolder}"
          },
          "waitOnAll": true
        },
        "transforms": [
          {
            "code": "\ttagProvider \u003d value[\u0027tagProvider\u0027]\n\tfromUDT \u003d value[\u0027fromUDT\u0027]\n\ttoUDTFolder \u003d value[\u0027toUDTFolder\u0027]\n\tderivedFromUDTFolder \u003d value[\u0027derivedFromUDTFolder\u0027] \n\tderivedFromUDTFolderArray \u003d derivedFromUDTFolder.split(\u0027/\u0027)\n\tderivedFromUDTFolderParentTagPath \u003d \u0027/\u0027.join(derivedFromUDTFolderArray[0:-1])\n\tj\u003d\u0027/\u0027\n\t#return j.join(newTypeId)\n\tself.custom.faultTags \u003d None\n\ttoFolder \u003d \u0027[\u0027+tagProvider+\u0027]_types_\u0027\n\t#return \n\tdef getFolder(fromFolder,path\u003d\u0027\u0027):\n\t\tfolderName \u003d fromFolder[\u0027name\u0027]\n\t\tfullPath \u003d folderName\n\t\tif len(path)\u003e0:\n\t\t\tfullPath \u003d path + \u0027/\u0027 + folderName\n\t \tnewFolder \u003d {\"name\": folderName,\"tagType\" : \u0027Folder\u0027}\n\t \t\n\t \t#get udts\n\t \ttags \u003d []\n\t \tfor tag in fromFolder[\u0027tags\u0027]:\n\t \t\tname \u003d tag[\u0027name\u0027]\n\t \t\ttagType \u003d tag[\u0027tagType\u0027]\n\t \t\tif tagType \u003d\u003d \u0027Folder\u0027:\n\t \t\t\tnewtag \u003d getFolder(tag,fullPath)\n\t \t\telif tagType \u003d\u003d \u0027UdtType\u0027:\n\t \t\t\tif \u0027typeId\u0027 not in tag:\n\t \t\t\t\tself.custom.faultTags \u003d tag\n\t \t\t\t\t#return tag \n\t \t\t\t\tbreak\n\t \t\t\ttypeId \u003d fullPath+\u0027/\u0027+name\n\t \t\t\tnewtag \u003d {\"name\": name,\"tagType\" : tagType,\u0027typeId\u0027:typeId}\n\t \t\ttags.append(newtag)\n\t \tnewFolder[\u0027tags\u0027] \u003d tags\n\t \treturn newFolder\n\n\n\n\n\ttoUDTFolderArray \u003d toUDTFolder.split(\u0027/\u0027)\n\ttoUDTFolderParentTagPath \u003d \u0027/\u0027.join(toUDTFolderArray[0:-1])\n\n\tbaseFoler \u003d getFolder(fromUDT,derivedFromUDTFolderParentTagPath)\n\n\t#return toUDTFolder\n\tbaseFoler[\u0027name\u0027] \u003d toUDTFolderArray[-1]\n\tbaseFoler[\u0027parentTagPath\u0027] \u003d toUDTFolderParentTagPath\n\treturn baseFoler",
            "type": "script"
          }
        ],
        "type": "expr-struct"
      },
      "persistent": true
    },
    "custom.toUDTFolder": {
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 269,
      "width": 305
    }
  },
  "root": {
    "children": [
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "parent.meta.name"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Standard/Popups/Faceplates/Content Standard/Popups/Faceplates/Text"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "TextFieldValue"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "bidirectional": true,
                    "path": "view.custom.tagProvider"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "backgroundColor": "#FFFFFF",
                "classes": "Standard/Popups/Faceplates/Content Standard/Popups/Faceplates/Text"
              }
            },
            "type": "ia.input.text-field"
          }
        ],
        "meta": {
          "name": "Tag Provider"
        },
        "position": {
          "basis": "32px"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "props": {
              "style": {
                "classes": "Standard/Popups/Faceplates/Content Standard/Popups/Faceplates/Text"
              },
              "text": "Derive From Folder"
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "TextFieldValue"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "bidirectional": true,
                    "path": "view.custom.derivedFromUDTFolder"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "backgroundColor": "#FFFFFF",
                "classes": "Standard/Popups/Faceplates/Content Standard/Popups/Faceplates/Text"
              }
            },
            "type": "ia.input.text-field"
          }
        ],
        "meta": {
          "name": "From Folder"
        },
        "position": {
          "basis": "32px"
        },
        "type": "ia.container.flex"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "parent.meta.name"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Standard/Popups/Faceplates/Content Standard/Popups/Faceplates/Text"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "TextFieldValue"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "bidirectional": true,
                    "path": "view.custom.toUDTFolder"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "backgroundColor": "#FFFFFF",
                "classes": "Standard/Popups/Faceplates/Content Standard/Popups/Faceplates/Text"
              }
            },
            "type": "ia.input.text-field"
          }
        ],
        "meta": {
          "name": "New Folder"
        },
        "position": {
          "basis": "32px"
        },
        "type": "ia.container.flex"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\t\n\ttagProvider \u003d self.view.custom.tagProvider\n\ttoUDT \u003d self.view.custom.toUDT\n\tparentTagPath \u003d toUDT[\u0027parentTagPath\u0027]\n\ttoUDTFolder \u003d self.view.custom.toUDTFolder\n\ttoFolder \u003d \u0027[\u0027+tagProvider+\u0027]_types_/\u0027 + parentTagPath\n\tcollisionPolicy \u003d \"a\" #Overwrite, \"a\" #abort\n\tself.view.custom.response \u003d \"Configuring....\"\n\tqualityCodes \u003d system.tag.configure(basePath\u003dtoFolder, tags\u003dtoUDT,collisionPolicy \u003d collisionPolicy)\n\tself.view.custom.response \u003d \"Configured:\" + str(qualityCodes[0])"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "ButtonCreate",
          "tooltip": {
            "enabled": true
          }
        },
        "position": {
          "basis": "34px"
        },
        "propConfig": {
          "meta.tooltip.text": {
            "binding": {
              "config": {
                "expression": "\"Create New Derived Folder \u0027\"+{view.custom.toUDTFolder}+\"\u0027 From: \u0027\" + {view.custom.derivedFromUDTFolder} +\"\u0027\""
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "style": {
            "classes": "Standard/Popups/Faceplates/Button/Default"
          },
          "text": "Create"
        },
        "type": "ia.input.button"
      },
      {
        "children": [
          {
            "meta": {
              "name": "Label"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "parent.meta.name"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Standard/Popups/Faceplates/Content Standard/Popups/Faceplates/Text"
              }
            },
            "type": "ia.display.label"
          },
          {
            "meta": {
              "name": "Value"
            },
            "position": {
              "basis": "50px",
              "grow": 1
            },
            "propConfig": {
              "props.text": {
                "binding": {
                  "config": {
                    "path": "view.custom.response"
                  },
                  "type": "property"
                }
              }
            },
            "props": {
              "style": {
                "classes": "Standard/Popups/Faceplates/Content Standard/Popups/Faceplates/Text"
              }
            },
            "type": "ia.display.label"
          }
        ],
        "meta": {
          "name": "Response"
        },
        "position": {
          "basis": "32px",
          "grow": 1
        },
        "type": "ia.container.flex"
      }
    ],
    "meta": {
      "name": "root"
    },
    "props": {
      "direction": "column"
    },
    "type": "ia.container.flex"
  }
}