{
  "custom": {},
  "params": {
    "AllowedContentTypes": [
      "Mimic",
      "Alarms",
      "Trend",
      "Setpoints"
    ],
    "ChildrenCount": 0,
    "ContentType": "",
    "ContentTypes": [
      {
        "contentType": "Overview",
        "label": "Overview",
        "order": 0
      }
    ],
    "Label": "",
    "MenuInstanceItemPosition": {
      "height": null,
      "left": 0,
      "top": 50,
      "width": 200
    },
    "MenuItemPosition": {
      "height": null,
      "left": 0,
      "top": 60,
      "width": 180
    },
    "ModelItem": {
      "BaseViewPath": "",
      "ModelItemTagPath": "",
      "Name": "",
      "Order": 0,
      "Path": "0",
      "TagFolderName": "",
      "ViewPaths": []
    },
    "OpenPopups": [],
    "ShowOnlyConfiguredContentTypes": true
  },
  "propConfig": {
    "params.AllowedContentTypes": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.ChildrenCount": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.ContentType": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.ContentTypes": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.Label": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.MenuInstanceItemPosition": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.MenuItemPosition": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.ModelItem": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.OpenPopups": {
      "paramDirection": "input",
      "persistent": true
    },
    "params.ShowOnlyConfiguredContentTypes": {
      "paramDirection": "input",
      "persistent": true
    }
  },
  "props": {
    "defaultSize": {
      "height": 50,
      "width": 180
    }
  },
  "root": {
    "children": [
      {
        "meta": {
          "name": "Alarm Summary"
        },
        "position": {
          "height": 0.3,
          "width": 0.5,
          "x": 0.05,
          "y": 0.7
        },
        "propConfig": {
          "meta.visible": {
            "binding": {
              "config": {
                "expression": "{view.params.ContentType}\u003d\"\""
              },
              "type": "expr"
            }
          },
          "props.params.AlarmSummaryTagPath": {
            "binding": {
              "config": {
                "expression": "{view.params.ModelItem.ModelItemTagPath}+\"/Alarm Summary\""
              },
              "type": "expr"
            }
          }
        },
        "props": {
          "path": "Standard/Components/Alarms/Alarm Summary Symbols"
        },
        "type": "ia.display.view"
      },
      {
        "events": {
          "component": {
            "onActionPerformed": {
              "config": {
                "script": "\n\tmodelItemTagPath \u003d self.view.params.ModelItem.ModelItemTagPath\n\tmodelItemPath \u003d self.view.params.ModelItem.Path\n\tContentType \u003d self.view.params.ContentType\n\topenPopups \u003d self.view.params.OpenPopups\n\t#Navigate to ContentType Page\n\tif ContentType !\u003d \"\":\t\n\t\t#Navigate to ContentType Page\t\t\n\t\tcontentTypePage \u003d \t\"/Home/\" + ContentType\n\t\t#system.perspective.print(\"MenuBarPopup - MenuItem - SendMessage with Action to Navigate to ContentType Page\")\n\t\tsystem.perspective.navigate(page \u003d contentTypePage)\n\t\t#Close all currently open popups\n\t\tfor popupID in openPopups:\n\t\t\t#system.perspective.print(\"MenuBar popupID to close: \" + str(popupID))\n\t\t\tsystem.perspective.closePopup(popupID)\n\t\t\t\n\t\t#Update ModelItemTagPaths Object\n\t\tuseSessionModelItem \u003d self.session.custom.UseSessionModelItem\n\t\tcurrentModelItem\u003d self.session.custom.CurrentModelItem\n\t\tperspectivePageID \u003d self.page.props.pageId\n\t\tself.session.custom.CurrentModelItem \u003d Standard.Navigation.Common.UpdateCurrentModelItem(Path \u003d modelItemPath,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t CurrentModelItem \u003d currentModelItem,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t UseSession \u003d useSessionModelItem,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t PerspectivePageID \u003d perspectivePageID,\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t ContentType \u003d ContentType)\n\n\telse:\n\t\t#Open Popup with Children Areas\n\t\tmodelItem \u003d self.view.params.ModelItem\n\t\tlabel \u003d self.view.params.Label\n\t\tshowOnlyConfiguredContentTypes \u003d self.view.params.ShowOnlyConfiguredContentTypes\n\t\tallowedContentTypes \u003d self.view.params.AllowedContentTypes\n\t\tmenuItemPosition \u003d self.view.params.MenuItemPosition\n\t\tmenuInstancePosition \u003d self.view.params.MenuInstanceItemPosition\n\t\tchildrenCount \u003d self.view.params.ChildrenCount\n\t\tcontentTypes \u003d self.view.params.ContentTypes\n\t\t#Position Calculation\n\t\t#Current Screen Size\n\t\tcurrentScreenHeight \u003d self.page.props.dimensions.primaryView.height\n\t\tcurrentScreenWidth \u003d self.page.props.dimensions.primaryView.width\n\t\t#Current Position\n\t\tcurrentTop \u003d menuItemPosition[\"top\"]#50\n\t\tcurrentWidth \u003d menuItemPosition[\"width\"]#200\n\t\tcurrentHeight \u003d menuItemPosition[\"height\"] #70 * (childrenCount + len(contentTypes))  \n\t\tcurrentLeft \u003d menuItemPosition[\"left\"]\n\t\t#New Position\n\t\tcontentTypes \u003d self.view.params.ContentTypes\n\t\t#system.perspective.print(\"contentTypes: \" + str(contentTypes))\n\t\t#Top is based on which item was selected\n\t\t#newTop \u003d currentTop + (len(contentTypes) + menuInstancePosition - 1) * 70 #The 50 pixels is the extra 50 due to the header #50\n\t\tnewTop \u003d currentTop + (menuInstancePosition - 1) * 50 #The 50 pixels is the extra 50 due to the header #50\n\t\t#Height is adjusted based on amount of children and contentTypes this item has\t\t\n\t\tnewHeight \u003d 50 * (childrenCount + len(contentTypes))\t\t\n\t\t#Left is increased by 1 incremnet of width\n\t\tnewLeft \u003d currentLeft + currentWidth\n\t\t#system.perspective.print(\"Menubar - Height: \" + str(height))\n\t\t\n\t\t#If Screen width too small then header becomes stacked and top must move down.\n\t\t#Width limit must be same as limit on basis binding on Standard/Framework/Overview/Overview Column and the setpoints on the overview column container (Navigation/Overview Column)\n#\t\tif currentScreenWidth \u003c\u003d 996:\n#\t\t\ttop \u003d 100\n\t\tposition \u003d {\"top\":newTop,\"left\":newLeft,\"height\":newHeight,\"width\":currentWidth}\n\t\t#system.perspective.print(\"Menu Bar Item new position: \" + str(position))\n\t\t#system.perspective.print(\"ScreenHeight: \" + str(currentScreenHeight))\n\t\t#If Screen height too small then make popup top equal to height available\n\t\tif (newHeight + newTop) \u003e  currentScreenHeight + 100:\t\t\t\n\t\t\t#newHeight \u003d currentScreenHeight - newTop\t\n\t\t\tnewTop \u003d currentScreenHeight - newHeight\n\t\t\t\n\t\t#If Screen width too small then open popup to left of current popup\t\n\t\tif (currentScreenWidth - newLeft) \u003c currentWidth:\n\t\t\tnewLeft \u003d currentLeft - currentWidth#left \u003d currentScreenWidth - width\n\t\t\t\n\t\t#Popup Details\n\t\t#system.perspective.print(\"Menubar - Opening Popup..Position Calculation..Popup Details..\")\n\t\t#Increment popupId based on previous popupId\n\t\tid \u003d \"menubarpopup\" + str(len(openPopups))\n\t\t#Add new popup id to openPopups array. Used when closing all open popups upon navigation.\n\t\topenPopups.append(id)\n\t\tview \u003d \"Standard/Navigation/Menu Bar/Components/Popup\"\t\n\t\t\t\n\t\tposition \u003d {\"top\":newTop,\"left\":newLeft,\"height\":newHeight,\"width\":currentWidth}\n\t\t#system.perspective.print(\"Menubar - position: \" + str(position))\n\t\tshowCloseIcon \u003d False\n\t\tdraggable \u003d False\n\t\tresizable \u003d False\n\t\tmodal \u003d True\n\t\toverlayDismiss \u003d True\n\t\t\n\t\tparams \u003d {\n\t\t\"ModelItem\":modelItem,\n\t\t\"ShowOnlyConfiguredContentTypes\":showOnlyConfiguredContentTypes,\n\t\t\"MenuItemPosition\":position,\n\t\t\"AllowedContentTypes\":allowedContentTypes,\n\t\t\"OpenPopups\":openPopups,\n\t\t\"ChildrenCount\":childrenCount,\n\t\t\"ContentTypes\":contentTypes,\n\t\t\"Label\":label\n\t\t}\n\t\tsystem.perspective.print(\"Opening Popup[\"+view+\"] With Params: \" + str(params))\n\t\tsystem.perspective.openPopup(id\u003did,view \u003d view,params \u003d params,position\u003dposition,showCloseIcon \u003d showCloseIcon,draggable \u003d draggable,resizable \u003d resizable,modal \u003d modal,overlayDismiss \u003d overlayDismiss)\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t"
              },
              "scope": "G",
              "type": "script"
            }
          }
        },
        "meta": {
          "name": "Button"
        },
        "position": {
          "height": 1,
          "width": 1
        },
        "propConfig": {
          "props.style.classes": {
            "persistent": true
          },
          "props.text": {
            "binding": {
              "config": {
                "path": "view.params.Label"
              },
              "type": "property"
            },
            "persistent": true
          }
        },
        "props": {
          "style": {
            "borderBottomLeftRadius": 0,
            "borderBottomRightRadius": 0,
            "borderStyle": "none",
            "borderTopLeftRadius": 0,
            "borderTopRightRadius": 0,
            "classes": "Standard/Popups/Navigation/MenuItem/Children"
          },
          "text": "",
          "textStyle": {
            "classes": "Standard/Popups/Text"
          }
        },
        "type": "ia.input.button"
      }
    ],
    "meta": {
      "name": "root",
      "tooltip": {
        "enabled": true
      }
    },
    "position": {
      "x": 0.12,
      "y": 0.1867
    },
    "propConfig": {
      "meta.tooltip.text": {
        "binding": {
          "config": {
            "path": "view.params.ModelItem.ModelItemTagPath"
          },
          "type": "property"
        }
      }
    },
    "props": {
      "mode": "percent"
    },
    "type": "ia.container.coord"
  }
}